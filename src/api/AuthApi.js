/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthQuery from '../model/AuthQuery';
import ErrorResponseBody from '../model/ErrorResponseBody';
import SlimUser from '../model/SlimUser';

/**
* Auth service.
* @module api/AuthApi
* @version 0.5.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the callback operation.
     * @callback module:api/AuthApi~callbackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SlimUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * OpenID Connect callback
     * OpenID Connect callback  This is the callback route for the OAuth provider, it should not be called directly. Redirects to browser with set-cookie header.
     * @param {module:api/AuthApi~callbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SlimUser}
     */
    callback(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SlimUser;
      return this.apiClient.callApi(
        '/api/auth/callback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMe operation.
     * @callback module:api/AuthApi~getMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SlimUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Me
     * Get Me  Get the user corresponding to your current auth credentials.
     * @param {module:api/AuthApi~getMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SlimUser}
     */
    getMe(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SlimUser;
      return this.apiClient.callApi(
        '/api/auth/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/AuthApi~loginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * Login  This will redirect you to the OAuth provider for authentication with email/pass, SSO, Google, Github, etc.
     * @param {module:model/AuthQuery} content Query parameters for login to be included as kv pairs after ? on the request URL.
     * @param {module:api/AuthApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    login(content, callback) {
      let postBody = null;
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
        'content': content
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/auth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/AuthApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout
     * Logout  Invalidate your current auth credential stored typically stored in a cookie. This does not invalidate your API key.
     * @param {module:api/AuthApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logout(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/auth', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
