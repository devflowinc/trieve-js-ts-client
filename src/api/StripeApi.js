/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponseBody from '../model/ErrorResponseBody';
import StripePlan from '../model/StripePlan';

/**
* Stripe service.
* @module api/StripeApi
* @version 0.5.0
*/
export default class StripeApi {

    /**
    * Constructs a new StripeApi. 
    * @alias module:api/StripeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelSubscription operation.
     * @callback module:api/StripeApi~cancelSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Subscription
     * Cancel Subscription  Cancel a subscription by its id
     * @param {String} tROrganization The organization id to use for the request
     * @param {String} subscriptionId id of the subscription you want to cancel
     * @param {module:api/StripeApi~cancelSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelSubscription(tROrganization, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'tROrganization' is set
      if (tROrganization === undefined || tROrganization === null) {
        throw new Error("Missing the required parameter 'tROrganization' when calling cancelSubscription");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cancelSubscription");
      }

      let pathParams = {
        'subscription_id': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Organization': tROrganization
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/stripe/subscription/{subscription_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the directToPaymentLink operation.
     * @callback module:api/StripeApi~directToPaymentLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checkout
     * Checkout  Get a direct link to the stripe checkout page for the plan and organization
     * @param {String} planId id of the plan you want to subscribe to
     * @param {String} organizationId id of the organization you want to subscribe to the plan
     * @param {module:api/StripeApi~directToPaymentLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    directToPaymentLink(planId, organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling directToPaymentLink");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling directToPaymentLink");
      }

      let pathParams = {
        'plan_id': planId,
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/stripe/payment_link/{plan_id}/{organization_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPlans operation.
     * @callback module:api/StripeApi~getAllPlansCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StripePlan>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Plans
     * Get All Plans  Get a list of all plans
     * @param {module:api/StripeApi~getAllPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StripePlan>}
     */
    getAllPlans(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StripePlan];
      return this.apiClient.callApi(
        '/api/stripe/plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSubscriptionPlan operation.
     * @callback module:api/StripeApi~updateSubscriptionPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Subscription Plan
     * Update Subscription Plan  Update a subscription to a new plan
     * @param {String} tROrganization The organization id to use for the request
     * @param {String} subscriptionId id of the subscription you want to update
     * @param {String} planId id of the plan you want to subscribe to
     * @param {module:api/StripeApi~updateSubscriptionPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSubscriptionPlan(tROrganization, subscriptionId, planId, callback) {
      let postBody = null;
      // verify the required parameter 'tROrganization' is set
      if (tROrganization === undefined || tROrganization === null) {
        throw new Error("Missing the required parameter 'tROrganization' when calling updateSubscriptionPlan");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling updateSubscriptionPlan");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling updateSubscriptionPlan");
      }

      let pathParams = {
        'subscription_id': subscriptionId,
        'plan_id': planId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Organization': tROrganization
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/stripe/subscription_plan/{subscription_id}/{plan_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
