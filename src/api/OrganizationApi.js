/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrganizationData from '../model/CreateOrganizationData';
import ErrorResponseBody from '../model/ErrorResponseBody';
import Organization from '../model/Organization';
import OrganizationUsageCount from '../model/OrganizationUsageCount';
import SlimUser from '../model/SlimUser';
import UpdateOrganizationData from '../model/UpdateOrganizationData';

/**
* Organization service.
* @module api/OrganizationApi
* @version 0.5.0
*/
export default class OrganizationApi {

    /**
    * Constructs a new OrganizationApi. 
    * @alias module:api/OrganizationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOrganization operation.
     * @callback module:api/OrganizationApi~createOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Organization
     * Create Organization  Create a new organization. The auth'ed user who creates the organization will be the default owner of the organization.
     * @param {module:model/CreateOrganizationData} createOrganizationData The organization data that you want to create
     * @param {module:api/OrganizationApi~createOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    createOrganization(createOrganizationData, callback) {
      let postBody = createOrganizationData;
      // verify the required parameter 'createOrganizationData' is set
      if (createOrganizationData === undefined || createOrganizationData === null) {
        throw new Error("Missing the required parameter 'createOrganizationData' when calling createOrganization");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/api/organization', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationById operation.
     * @callback module:api/OrganizationApi~deleteOrganizationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Organization
     * Delete Organization  Delete an organization by its id. The auth'ed user must be an owner of the organization to delete it.
     * @param {String} tROrganization The organization id to use for the request
     * @param {String} organizationId The id of the organization you want to fetch.
     * @param {module:api/OrganizationApi~deleteOrganizationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    deleteOrganizationById(tROrganization, organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'tROrganization' is set
      if (tROrganization === undefined || tROrganization === null) {
        throw new Error("Missing the required parameter 'tROrganization' when calling deleteOrganizationById");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationById");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Organization': tROrganization
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/api/organization/{organization_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationById operation.
     * @callback module:api/OrganizationApi~getOrganizationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Organization
     * Get Organization  Fetch the details of an organization by its id. The auth'ed user must be an admin or owner of the organization to fetch it.
     * @param {String} tROrganization The organization id to use for the request
     * @param {String} organizationId The id of the organization you want to fetch.
     * @param {module:api/OrganizationApi~getOrganizationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    getOrganizationById(tROrganization, organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'tROrganization' is set
      if (tROrganization === undefined || tROrganization === null) {
        throw new Error("Missing the required parameter 'tROrganization' when calling getOrganizationById");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationById");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Organization': tROrganization
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/api/organization/{organization_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationUsage operation.
     * @callback module:api/OrganizationApi~getOrganizationUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationUsageCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Organization Usage
     * Get Organization Usage  Fetch the current usage specification of an organization by its id. The auth'ed user must be an admin or owner of the organization to fetch it.
     * @param {String} tROrganization The organization id to use for the request
     * @param {String} organizationId The id of the organization you want to fetch the usage of.
     * @param {module:api/OrganizationApi~getOrganizationUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationUsageCount}
     */
    getOrganizationUsage(tROrganization, organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'tROrganization' is set
      if (tROrganization === undefined || tROrganization === null) {
        throw new Error("Missing the required parameter 'tROrganization' when calling getOrganizationUsage");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationUsage");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Organization': tROrganization
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrganizationUsageCount;
      return this.apiClient.callApi(
        '/api/organization/usage/{organization_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationUsers operation.
     * @callback module:api/OrganizationApi~getOrganizationUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SlimUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Organization Users
     * Get Organization Users  Fetch the users of an organization by its id. The auth'ed user must be an admin or owner of the organization to fetch it.
     * @param {String} tROrganization The organization id to use for the request
     * @param {String} organizationId The id of the organization you want to fetch the users of.
     * @param {module:api/OrganizationApi~getOrganizationUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SlimUser>}
     */
    getOrganizationUsers(tROrganization, organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'tROrganization' is set
      if (tROrganization === undefined || tROrganization === null) {
        throw new Error("Missing the required parameter 'tROrganization' when calling getOrganizationUsers");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationUsers");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Organization': tROrganization
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SlimUser];
      return this.apiClient.callApi(
        '/api/organization/users/{organization_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganization operation.
     * @callback module:api/OrganizationApi~updateOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Organization
     * Update Organization  Update an organization. Only the owner of the organization can update it.
     * @param {String} tROrganization The organization id to use for the request
     * @param {module:model/UpdateOrganizationData} updateOrganizationData The organization data that you want to update
     * @param {module:api/OrganizationApi~updateOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    updateOrganization(tROrganization, updateOrganizationData, callback) {
      let postBody = updateOrganizationData;
      // verify the required parameter 'tROrganization' is set
      if (tROrganization === undefined || tROrganization === null) {
        throw new Error("Missing the required parameter 'tROrganization' when calling updateOrganization");
      }
      // verify the required parameter 'updateOrganizationData' is set
      if (updateOrganizationData === undefined || updateOrganizationData === null) {
        throw new Error("Missing the required parameter 'updateOrganizationData' when calling updateOrganization");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Organization': tROrganization
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/api/organization', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
