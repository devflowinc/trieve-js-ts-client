/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddChunkToGroupData from '../model/AddChunkToGroupData';
import BookmarkData from '../model/BookmarkData';
import BookmarkGroupResult from '../model/BookmarkGroupResult';
import ChunkGroup from '../model/ChunkGroup';
import CreateChunkGroupData from '../model/CreateChunkGroupData';
import ErrorResponseBody from '../model/ErrorResponseBody';
import GetGroupsForChunksData from '../model/GetGroupsForChunksData';
import GroupData from '../model/GroupData';
import GroupScoreChunkDTO from '../model/GroupScoreChunkDTO';
import ReccomendGroupChunksRequest from '../model/ReccomendGroupChunksRequest';
import SearchGroupsResult from '../model/SearchGroupsResult';
import SearchOverGroupsData from '../model/SearchOverGroupsData';
import SearchOverGroupsResponseBody from '../model/SearchOverGroupsResponseBody';
import SearchWithinGroupData from '../model/SearchWithinGroupData';
import UpdateChunkGroupData from '../model/UpdateChunkGroupData';
import UpdateGroupByTrackingIDData from '../model/UpdateGroupByTrackingIDData';

/**
* ChunkGroup service.
* @module api/ChunkGroupApi
* @version 0.5.0
*/
export default class ChunkGroupApi {

    /**
    * Constructs a new ChunkGroupApi. 
    * @alias module:api/ChunkGroupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addChunkToGroup operation.
     * @callback module:api/ChunkGroupApi~addChunkToGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Chunk to Group
     * Add Chunk to Group  Route to add a chunk to a group.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} groupId Id of the group to add the chunk to as a bookmark
     * @param {module:model/AddChunkToGroupData} addChunkToGroupData JSON request payload to add a chunk to a group (bookmark it)
     * @param {module:api/ChunkGroupApi~addChunkToGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addChunkToGroup(tRDataset, groupId, addChunkToGroupData, callback) {
      let postBody = addChunkToGroupData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling addChunkToGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling addChunkToGroup");
      }
      // verify the required parameter 'addChunkToGroupData' is set
      if (addChunkToGroupData === undefined || addChunkToGroupData === null) {
        throw new Error("Missing the required parameter 'addChunkToGroupData' when calling addChunkToGroup");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/chunk_group/chunk/{group_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addChunkToGroupByTrackingId operation.
     * @callback module:api/ChunkGroupApi~addChunkToGroupByTrackingIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Chunk to Group by Tracking ID
     * Add Chunk to Group by Tracking ID  Route to add a chunk to a group by tracking id.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} trackingId Id of the group to add the chunk to as a bookmark
     * @param {module:model/AddChunkToGroupData} addChunkToGroupData JSON request payload to add a chunk to a group (bookmark it)
     * @param {module:api/ChunkGroupApi~addChunkToGroupByTrackingIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addChunkToGroupByTrackingId(tRDataset, trackingId, addChunkToGroupData, callback) {
      let postBody = addChunkToGroupData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling addChunkToGroupByTrackingId");
      }
      // verify the required parameter 'trackingId' is set
      if (trackingId === undefined || trackingId === null) {
        throw new Error("Missing the required parameter 'trackingId' when calling addChunkToGroupByTrackingId");
      }
      // verify the required parameter 'addChunkToGroupData' is set
      if (addChunkToGroupData === undefined || addChunkToGroupData === null) {
        throw new Error("Missing the required parameter 'addChunkToGroupData' when calling addChunkToGroupByTrackingId");
      }

      let pathParams = {
        'tracking_id': trackingId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/chunk_group/tracking_id/{tracking_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createChunkGroup operation.
     * @callback module:api/ChunkGroupApi~createChunkGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChunkGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Chunk Group
     * Create Chunk Group  Create a new chunk_group. This is a way to group chunks together. If you try to create a chunk_group with the same tracking_id as an existing chunk_group, this operation will fail.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/CreateChunkGroupData} createChunkGroupData JSON request payload to cretea a chunkGroup
     * @param {module:api/ChunkGroupApi~createChunkGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChunkGroup}
     */
    createChunkGroup(tRDataset, createChunkGroupData, callback) {
      let postBody = createChunkGroupData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling createChunkGroup");
      }
      // verify the required parameter 'createChunkGroupData' is set
      if (createChunkGroupData === undefined || createChunkGroupData === null) {
        throw new Error("Missing the required parameter 'createChunkGroupData' when calling createChunkGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChunkGroup;
      return this.apiClient.callApi(
        '/api/chunk_group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChunkGroup operation.
     * @callback module:api/ChunkGroupApi~deleteChunkGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Group
     * Delete Group  This will delete a chunk_group. This will not delete the chunks that are in the group. We will soon support deleting a chunk_group along with its member chunks.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} groupId Id of the group you want to fetch.
     * @param {Boolean} deleteChunks Delete the chunks within the group
     * @param {module:api/ChunkGroupApi~deleteChunkGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChunkGroup(tRDataset, groupId, deleteChunks, callback) {
      let postBody = null;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling deleteChunkGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteChunkGroup");
      }
      // verify the required parameter 'deleteChunks' is set
      if (deleteChunks === undefined || deleteChunks === null) {
        throw new Error("Missing the required parameter 'deleteChunks' when calling deleteChunkGroup");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
        'delete_chunks': deleteChunks
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/chunk_group/{group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroupByTrackingId operation.
     * @callback module:api/ChunkGroupApi~deleteGroupByTrackingIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Group by Tracking ID
     * Delete Group by Tracking ID  Delete a chunk_group with the given tracking id.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} trackingId Tracking id of the chunk_group to delete
     * @param {module:api/ChunkGroupApi~deleteGroupByTrackingIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroupByTrackingId(tRDataset, trackingId, callback) {
      let postBody = null;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling deleteGroupByTrackingId");
      }
      // verify the required parameter 'trackingId' is set
      if (trackingId === undefined || trackingId === null) {
        throw new Error("Missing the required parameter 'trackingId' when calling deleteGroupByTrackingId");
      }

      let pathParams = {
        'tracking_id': trackingId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/chunk_group/tracking_id/{tracking_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChunkGroup operation.
     * @callback module:api/ChunkGroupApi~getChunkGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChunkGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Group
     * Get Group  Fetch the group with the given id. get_group
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} groupId Id of the group you want to fetch.
     * @param {module:api/ChunkGroupApi~getChunkGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChunkGroup}
     */
    getChunkGroup(tRDataset, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling getChunkGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getChunkGroup");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChunkGroup;
      return this.apiClient.callApi(
        '/api/chunk_group/{group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChunksInGroup operation.
     * @callback module:api/ChunkGroupApi~getChunksInGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BookmarkData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Chunks in Group
     * Get Chunks in Group  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} groupId Id of the group you want to fetch.
     * @param {Number} page The page of chunks to get from the group
     * @param {module:api/ChunkGroupApi~getChunksInGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BookmarkData}
     */
    getChunksInGroup(tRDataset, groupId, page, callback) {
      let postBody = null;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling getChunksInGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getChunksInGroup");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getChunksInGroup");
      }

      let pathParams = {
        'group_id': groupId,
        'page': page
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BookmarkData;
      return this.apiClient.callApi(
        '/api/chunk_group/{group_id}/{page}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChunksInGroupByTrackingId operation.
     * @callback module:api/ChunkGroupApi~getChunksInGroupByTrackingIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BookmarkData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Chunks in Group by Tracking ID
     * Get Chunks in Group by Tracking ID  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} groupTrackingId The id of the group to get the chunks from
     * @param {Number} page The page of chunks to get from the group
     * @param {module:api/ChunkGroupApi~getChunksInGroupByTrackingIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BookmarkData}
     */
    getChunksInGroupByTrackingId(tRDataset, groupTrackingId, page, callback) {
      let postBody = null;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling getChunksInGroupByTrackingId");
      }
      // verify the required parameter 'groupTrackingId' is set
      if (groupTrackingId === undefined || groupTrackingId === null) {
        throw new Error("Missing the required parameter 'groupTrackingId' when calling getChunksInGroupByTrackingId");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getChunksInGroupByTrackingId");
      }

      let pathParams = {
        'group_tracking_id': groupTrackingId,
        'page': page
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BookmarkData;
      return this.apiClient.callApi(
        '/api/chunk_group/tracking_id/{group_tracking_id}/{page}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupByTrackingId operation.
     * @callback module:api/ChunkGroupApi~getGroupByTrackingIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChunkGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Group by Tracking ID
     * Get Group by Tracking ID  Fetch the group with the given tracking id. get_group_by_tracking_id
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} trackingId The tracking id of the group to fetch.
     * @param {module:api/ChunkGroupApi~getGroupByTrackingIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChunkGroup}
     */
    getGroupByTrackingId(tRDataset, trackingId, callback) {
      let postBody = null;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling getGroupByTrackingId");
      }
      // verify the required parameter 'trackingId' is set
      if (trackingId === undefined || trackingId === null) {
        throw new Error("Missing the required parameter 'trackingId' when calling getGroupByTrackingId");
      }

      let pathParams = {
        'tracking_id': trackingId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChunkGroup;
      return this.apiClient.callApi(
        '/api/chunk_group/tracking_id/{tracking_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupsChunkIsIn operation.
     * @callback module:api/ChunkGroupApi~getGroupsChunkIsInCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BookmarkGroupResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Groups for Chunks
     * Get Groups for Chunks  Route to get the groups that a chunk is in.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/GetGroupsForChunksData} getGroupsForChunksData JSON request payload to get the groups that a chunk is in
     * @param {module:api/ChunkGroupApi~getGroupsChunkIsInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BookmarkGroupResult>}
     */
    getGroupsChunkIsIn(tRDataset, getGroupsForChunksData, callback) {
      let postBody = getGroupsForChunksData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling getGroupsChunkIsIn");
      }
      // verify the required parameter 'getGroupsForChunksData' is set
      if (getGroupsForChunksData === undefined || getGroupsForChunksData === null) {
        throw new Error("Missing the required parameter 'getGroupsForChunksData' when calling getGroupsChunkIsIn");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [BookmarkGroupResult];
      return this.apiClient.callApi(
        '/api/chunk_group/chunks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecommendedGroups operation.
     * @callback module:api/ChunkGroupApi~getRecommendedGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupScoreChunkDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recommended Groups
     * Get Recommended Groups  Route to get recommended groups. This route will return groups which are similar to the groups in the request body.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/ReccomendGroupChunksRequest} reccomendGroupChunksRequest JSON request payload to get recommendations of chunks similar to the chunks in the request
     * @param {module:api/ChunkGroupApi~getRecommendedGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupScoreChunkDTO>}
     */
    getRecommendedGroups(tRDataset, reccomendGroupChunksRequest, callback) {
      let postBody = reccomendGroupChunksRequest;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling getRecommendedGroups");
      }
      // verify the required parameter 'reccomendGroupChunksRequest' is set
      if (reccomendGroupChunksRequest === undefined || reccomendGroupChunksRequest === null) {
        throw new Error("Missing the required parameter 'reccomendGroupChunksRequest' when calling getRecommendedGroups");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [GroupScoreChunkDTO];
      return this.apiClient.callApi(
        '/api/chunk_group/recommend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpecificDatasetChunkGroups operation.
     * @callback module:api/ChunkGroupApi~getSpecificDatasetChunkGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Groups for Dataset
     * Get Groups for Dataset  Fetch the groups which belong to a dataset specified by its id.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} datasetId The id of the dataset to fetch groups for.
     * @param {Number} page The page of groups to fetch. Each page contains 10 groups. Support for custom page size is coming soon.
     * @param {module:api/ChunkGroupApi~getSpecificDatasetChunkGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupData}
     */
    getSpecificDatasetChunkGroups(tRDataset, datasetId, page, callback) {
      let postBody = null;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling getSpecificDatasetChunkGroups");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getSpecificDatasetChunkGroups");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getSpecificDatasetChunkGroups");
      }

      let pathParams = {
        'dataset_id': datasetId,
        'page': page
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupData;
      return this.apiClient.callApi(
        '/api/dataset/groups/{dataset_id}/{page}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeChunkFromGroup operation.
     * @callback module:api/ChunkGroupApi~removeChunkFromGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Chunk from Group
     * Remove Chunk from Group  Route to remove a chunk from a group.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} groupId Id of the group to remove the bookmark'ed chunk from
     * @param {module:model/CreateChunkGroupData} createChunkGroupData JSON request payload to cretea a chunkGroup
     * @param {module:api/ChunkGroupApi~removeChunkFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeChunkFromGroup(tRDataset, groupId, createChunkGroupData, callback) {
      let postBody = createChunkGroupData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling removeChunkFromGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling removeChunkFromGroup");
      }
      // verify the required parameter 'createChunkGroupData' is set
      if (createChunkGroupData === undefined || createChunkGroupData === null) {
        throw new Error("Missing the required parameter 'createChunkGroupData' when calling removeChunkFromGroup");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/chunk_group/chunk/{group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchOverGroups operation.
     * @callback module:api/ChunkGroupApi~searchOverGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchOverGroupsResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Over Groups
     * Search Over Groups  This route allows you to get groups as results instead of chunks. Each group returned will have the matching chunks sorted by similarity within the group. This is useful for when you want to get groups of chunks which are similar to the search query. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large. Compatible with semantic, fulltext, or hybrid search modes.
     * @param {module:model/SearchOverGroupsData} searchOverGroupsData JSON request payload to semantically search over groups
     * @param {module:api/ChunkGroupApi~searchOverGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchOverGroupsResponseBody}
     */
    searchOverGroups(searchOverGroupsData, callback) {
      let postBody = searchOverGroupsData;
      // verify the required parameter 'searchOverGroupsData' is set
      if (searchOverGroupsData === undefined || searchOverGroupsData === null) {
        throw new Error("Missing the required parameter 'searchOverGroupsData' when calling searchOverGroups");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchOverGroupsResponseBody;
      return this.apiClient.callApi(
        '/api/chunk_group/group_oriented_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchWithinGroup operation.
     * @callback module:api/ChunkGroupApi~searchWithinGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchGroupsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Within Group
     * Search Within Group  This route allows you to search only within a group. This is useful for when you only want search results to contain chunks which are members of a specific group. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/SearchWithinGroupData} searchWithinGroupData JSON request payload to semantically search a group
     * @param {module:api/ChunkGroupApi~searchWithinGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchGroupsResult}
     */
    searchWithinGroup(tRDataset, searchWithinGroupData, callback) {
      let postBody = searchWithinGroupData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling searchWithinGroup");
      }
      // verify the required parameter 'searchWithinGroupData' is set
      if (searchWithinGroupData === undefined || searchWithinGroupData === null) {
        throw new Error("Missing the required parameter 'searchWithinGroupData' when calling searchWithinGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchGroupsResult;
      return this.apiClient.callApi(
        '/api/chunk_group/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChunkGroup operation.
     * @callback module:api/ChunkGroupApi~updateChunkGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Group
     * Update Group  Update a chunk_group. If you try to change the tracking_id to one that already exists, this operation will fail.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/UpdateChunkGroupData} updateChunkGroupData JSON request payload to update a chunkGroup
     * @param {module:api/ChunkGroupApi~updateChunkGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateChunkGroup(tRDataset, updateChunkGroupData, callback) {
      let postBody = updateChunkGroupData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling updateChunkGroup");
      }
      // verify the required parameter 'updateChunkGroupData' is set
      if (updateChunkGroupData === undefined || updateChunkGroupData === null) {
        throw new Error("Missing the required parameter 'updateChunkGroupData' when calling updateChunkGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/chunk_group', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupByTrackingId operation.
     * @callback module:api/ChunkGroupApi~updateGroupByTrackingIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Group by Tracking ID
     * Update Group by Tracking ID  Update a chunk_group with the given tracking id.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} trackingId Tracking id of the chunk_group to update
     * @param {module:model/UpdateGroupByTrackingIDData} updateGroupByTrackingIDData JSON request payload to update a chunkGroup
     * @param {module:api/ChunkGroupApi~updateGroupByTrackingIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateGroupByTrackingId(tRDataset, trackingId, updateGroupByTrackingIDData, callback) {
      let postBody = updateGroupByTrackingIDData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling updateGroupByTrackingId");
      }
      // verify the required parameter 'trackingId' is set
      if (trackingId === undefined || trackingId === null) {
        throw new Error("Missing the required parameter 'trackingId' when calling updateGroupByTrackingId");
      }
      // verify the required parameter 'updateGroupByTrackingIDData' is set
      if (updateGroupByTrackingIDData === undefined || updateGroupByTrackingIDData === null) {
        throw new Error("Missing the required parameter 'updateGroupByTrackingIDData' when calling updateGroupByTrackingId");
      }

      let pathParams = {
        'tracking_id': trackingId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/chunk_group/tracking_id/{tracking_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
