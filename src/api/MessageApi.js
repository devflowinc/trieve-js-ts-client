/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateMessageData from '../model/CreateMessageData';
import EditMessageData from '../model/EditMessageData';
import ErrorResponseBody from '../model/ErrorResponseBody';
import Message from '../model/Message';
import RegenerateMessageData from '../model/RegenerateMessageData';

/**
* Message service.
* @module api/MessageApi
* @version 0.5.0
*/
export default class MessageApi {

    /**
    * Constructs a new MessageApi. 
    * @alias module:api/MessageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMessageCompletionHandler operation.
     * @callback module:api/MessageApi~createMessageCompletionHandlerCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a message
     * Create a message  Create a message. Messages are attached to topics in order to coordinate memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon. Currently, you can only send user messages. If the topic is a RAG topic then the response will include Chunks first on the stream. The structure will look like `[chunks]||mesage`. See docs.trieve.ai for more information.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/CreateMessageData} createMessageData JSON request payload to create a message completion
     * @param {module:api/MessageApi~createMessageCompletionHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    createMessageCompletionHandler(tRDataset, createMessageData, callback) {
      let postBody = createMessageData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling createMessageCompletionHandler");
      }
      // verify the required parameter 'createMessageData' is set
      if (createMessageData === undefined || createMessageData === null) {
        throw new Error("Missing the required parameter 'createMessageData' when calling createMessageCompletionHandler");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editMessageHandler operation.
     * @callback module:api/MessageApi~editMessageHandlerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a message
     * Edit a message  Edit a message which exists within the topic's chat history. This will delete the message and replace it with a new message. The new message will be generated by the AI based on the new content provided in the request body. The response will include Chunks first on the stream if the topic is using RAG. The structure will look like `[chunks]||mesage`. See docs.trieve.ai for more information.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/EditMessageData} editMessageData JSON request payload to edit a message and get a new stream
     * @param {module:api/MessageApi~editMessageHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editMessageHandler(tRDataset, editMessageData, callback) {
      let postBody = editMessageData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling editMessageHandler");
      }
      // verify the required parameter 'editMessageData' is set
      if (editMessageData === undefined || editMessageData === null) {
        throw new Error("Missing the required parameter 'editMessageData' when calling editMessageHandler");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/message', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllTopicMessages operation.
     * @callback module:api/MessageApi~getAllTopicMessagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Message>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all messages for a given topic
     * Get all messages for a given topic  Get all messages for a given topic. If the topic is a RAG topic then the response will include Chunks first on each message. The structure will look like `[chunks]||mesage`. See docs.trieve.ai for more information.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} messagesTopicId The ID of the topic to get messages for.
     * @param {module:api/MessageApi~getAllTopicMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Message>}
     */
    getAllTopicMessages(tRDataset, messagesTopicId, callback) {
      let postBody = null;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling getAllTopicMessages");
      }
      // verify the required parameter 'messagesTopicId' is set
      if (messagesTopicId === undefined || messagesTopicId === null) {
        throw new Error("Missing the required parameter 'messagesTopicId' when calling getAllTopicMessages");
      }

      let pathParams = {
        'messages_topic_id': messagesTopicId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Message];
      return this.apiClient.callApi(
        '/api/messages/{messages_topic_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the regenerateMessageHandler operation.
     * @callback module:api/MessageApi~regenerateMessageHandlerCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerate message
     * Regenerate message  Regenerate the assistant response to the last user message of a topic. This will delete the last message and replace it with a new message. The response will include Chunks first on the stream if the topic is using RAG. The structure will look like `[chunks]||mesage`. See docs.trieve.ai for more information.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/RegenerateMessageData} regenerateMessageData JSON request payload to delete an agent message then regenerate it in a strem
     * @param {module:api/MessageApi~regenerateMessageHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    regenerateMessageHandler(tRDataset, regenerateMessageData, callback) {
      let postBody = regenerateMessageData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling regenerateMessageHandler");
      }
      // verify the required parameter 'regenerateMessageData' is set
      if (regenerateMessageData === undefined || regenerateMessageData === null) {
        throw new Error("Missing the required parameter 'regenerateMessageData' when calling regenerateMessageHandler");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/message', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
