/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientDatasetConfiguration from '../model/ClientDatasetConfiguration';
import CreateDatasetRequest from '../model/CreateDatasetRequest';
import Dataset from '../model/Dataset';
import DatasetAndUsage from '../model/DatasetAndUsage';
import DeleteDatasetRequest from '../model/DeleteDatasetRequest';
import ErrorResponseBody from '../model/ErrorResponseBody';
import UpdateDatasetRequest from '../model/UpdateDatasetRequest';

/**
* Dataset service.
* @module api/DatasetApi
* @version 0.5.0
*/
export default class DatasetApi {

    /**
    * Constructs a new DatasetApi. 
    * @alias module:api/DatasetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDataset operation.
     * @callback module:api/DatasetApi~createDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create dataset
     * Create dataset  Create a new dataset. The auth'ed user must be an owner of the organization to create a dataset.
     * @param {String} tROrganization The organization id to use for the request
     * @param {module:model/CreateDatasetRequest} createDatasetRequest JSON request payload to create a new dataset
     * @param {module:api/DatasetApi~createDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    createDataset(tROrganization, createDatasetRequest, callback) {
      let postBody = createDatasetRequest;
      // verify the required parameter 'tROrganization' is set
      if (tROrganization === undefined || tROrganization === null) {
        throw new Error("Missing the required parameter 'tROrganization' when calling createDataset");
      }
      // verify the required parameter 'createDatasetRequest' is set
      if (createDatasetRequest === undefined || createDatasetRequest === null) {
        throw new Error("Missing the required parameter 'createDatasetRequest' when calling createDataset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Organization': tROrganization
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/api/dataset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataset operation.
     * @callback module:api/DatasetApi~deleteDatasetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Dataset
     * Delete Dataset  Delete a dataset. The auth'ed user must be an owner of the organization to delete a dataset.
     * @param {String} tROrganization The organization id to use for the request
     * @param {module:model/DeleteDatasetRequest} deleteDatasetRequest JSON request payload to delete a dataset
     * @param {module:api/DatasetApi~deleteDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDataset(tROrganization, deleteDatasetRequest, callback) {
      let postBody = deleteDatasetRequest;
      // verify the required parameter 'tROrganization' is set
      if (tROrganization === undefined || tROrganization === null) {
        throw new Error("Missing the required parameter 'tROrganization' when calling deleteDataset");
      }
      // verify the required parameter 'deleteDatasetRequest' is set
      if (deleteDatasetRequest === undefined || deleteDatasetRequest === null) {
        throw new Error("Missing the required parameter 'deleteDatasetRequest' when calling deleteDataset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Organization': tROrganization
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dataset', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientDatasetConfig operation.
     * @callback module:api/DatasetApi~getClientDatasetConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientDatasetConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Client Configuration
     * Get Client Configuration  Get the client configuration for a dataset. Will use the TR-D
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:api/DatasetApi~getClientDatasetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientDatasetConfiguration}
     */
    getClientDatasetConfig(tRDataset, callback) {
      let postBody = null;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling getClientDatasetConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientDatasetConfiguration;
      return this.apiClient.callApi(
        '/api/dataset/envs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataset operation.
     * @callback module:api/DatasetApi~getDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Dataset
     * Get Dataset  Get a dataset by id. The auth'ed user must be an admin or owner of the organization to get a dataset.
     * @param {String} tROrganization The organization id to use for the request
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} datasetId The id of the dataset you want to retrieve.
     * @param {module:api/DatasetApi~getDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    getDataset(tROrganization, tRDataset, datasetId, callback) {
      let postBody = null;
      // verify the required parameter 'tROrganization' is set
      if (tROrganization === undefined || tROrganization === null) {
        throw new Error("Missing the required parameter 'tROrganization' when calling getDataset");
      }
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling getDataset");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getDataset");
      }

      let pathParams = {
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Organization': tROrganization,
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/api/dataset/{dataset_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasetsFromOrganization operation.
     * @callback module:api/DatasetApi~getDatasetsFromOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DatasetAndUsage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Datasets from Organization
     * Get Datasets from Organization  Get all datasets for an organization. The auth'ed user must be an admin or owner of the organization to get its datasets.
     * @param {String} tROrganization The organization id to use for the request
     * @param {String} organizationId id of the organization you want to retrieve datasets for
     * @param {module:api/DatasetApi~getDatasetsFromOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DatasetAndUsage>}
     */
    getDatasetsFromOrganization(tROrganization, organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'tROrganization' is set
      if (tROrganization === undefined || tROrganization === null) {
        throw new Error("Missing the required parameter 'tROrganization' when calling getDatasetsFromOrganization");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getDatasetsFromOrganization");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Organization': tROrganization
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DatasetAndUsage];
      return this.apiClient.callApi(
        '/api/dataset/organization/{organization_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDataset operation.
     * @callback module:api/DatasetApi~updateDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Dataset
     * Update Dataset  Update a dataset. The auth'ed user must be an owner of the organization to update a dataset.
     * @param {String} tROrganization The organization id to use for the request
     * @param {module:model/UpdateDatasetRequest} updateDatasetRequest JSON request payload to update a dataset
     * @param {module:api/DatasetApi~updateDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    updateDataset(tROrganization, updateDatasetRequest, callback) {
      let postBody = updateDatasetRequest;
      // verify the required parameter 'tROrganization' is set
      if (tROrganization === undefined || tROrganization === null) {
        throw new Error("Missing the required parameter 'tROrganization' when calling updateDataset");
      }
      // verify the required parameter 'updateDatasetRequest' is set
      if (updateDatasetRequest === undefined || updateDatasetRequest === null) {
        throw new Error("Missing the required parameter 'updateDatasetRequest' when calling updateDataset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Organization': tROrganization
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/api/dataset', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
