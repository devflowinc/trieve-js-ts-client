/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChunkMetadata from '../model/ChunkMetadata';
import ChunkMetadataWithFileData from '../model/ChunkMetadataWithFileData';
import CreateChunkData from '../model/CreateChunkData';
import ErrorResponseBody from '../model/ErrorResponseBody';
import GenerateChunksRequest from '../model/GenerateChunksRequest';
import RecommendChunksRequest from '../model/RecommendChunksRequest';
import ReturnQueuedChunk from '../model/ReturnQueuedChunk';
import SearchChunkData from '../model/SearchChunkData';
import SearchChunkQueryResponseBody from '../model/SearchChunkQueryResponseBody';
import SuggestedQueriesRequest from '../model/SuggestedQueriesRequest';
import SuggestedQueriesResponse from '../model/SuggestedQueriesResponse';
import UpdateChunkByTrackingIdData from '../model/UpdateChunkByTrackingIdData';
import UpdateChunkData from '../model/UpdateChunkData';

/**
* Chunk service.
* @module api/ChunkApi
* @version 0.5.0
*/
export default class ChunkApi {

    /**
    * Constructs a new ChunkApi. 
    * @alias module:api/ChunkApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createChunk operation.
     * @callback module:api/ChunkApi~createChunkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReturnQueuedChunk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or Upsert Chunk or Chunks
     * Create or Upsert Chunk or Chunks  Create a new chunk. If the chunk has the same tracking_id as an existing chunk, the request will fail. Once a chunk is created, it can be searched for using the search endpoint.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/CreateChunkData} createChunkData JSON request payload to create a new chunk (chunk)
     * @param {module:api/ChunkApi~createChunkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReturnQueuedChunk}
     */
    createChunk(tRDataset, createChunkData, callback) {
      let postBody = createChunkData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling createChunk");
      }
      // verify the required parameter 'createChunkData' is set
      if (createChunkData === undefined || createChunkData === null) {
        throw new Error("Missing the required parameter 'createChunkData' when calling createChunk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReturnQueuedChunk;
      return this.apiClient.callApi(
        '/api/chunk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSuggestedQueriesHandler operation.
     * @callback module:api/ChunkApi~createSuggestedQueriesHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuggestedQueriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate suggested queries
     * Generate suggested queries  This endpoint will generate 3 suggested queries based off the query provided in the request body and return them as a JSON object.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/SuggestedQueriesRequest} suggestedQueriesRequest JSON request payload to get alternative suggested queries
     * @param {module:api/ChunkApi~createSuggestedQueriesHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuggestedQueriesResponse}
     */
    createSuggestedQueriesHandler(tRDataset, suggestedQueriesRequest, callback) {
      let postBody = suggestedQueriesRequest;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling createSuggestedQueriesHandler");
      }
      // verify the required parameter 'suggestedQueriesRequest' is set
      if (suggestedQueriesRequest === undefined || suggestedQueriesRequest === null) {
        throw new Error("Missing the required parameter 'suggestedQueriesRequest' when calling createSuggestedQueriesHandler");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuggestedQueriesResponse;
      return this.apiClient.callApi(
        '/api/chunk/gen_suggestions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChunk operation.
     * @callback module:api/ChunkApi~deleteChunkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Chunk
     * Delete Chunk  Delete a chunk by its id. If deleting a root chunk which has a collision, the most recently created collision will become a new root chunk.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} chunkId Id of the chunk you want to fetch.
     * @param {module:api/ChunkApi~deleteChunkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChunk(tRDataset, chunkId, callback) {
      let postBody = null;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling deleteChunk");
      }
      // verify the required parameter 'chunkId' is set
      if (chunkId === undefined || chunkId === null) {
        throw new Error("Missing the required parameter 'chunkId' when calling deleteChunk");
      }

      let pathParams = {
        'chunk_id': chunkId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/chunk/{chunk_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChunkByTrackingId operation.
     * @callback module:api/ChunkApi~deleteChunkByTrackingIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Chunk By Tracking Id
     * Delete Chunk By Tracking Id  Delete a chunk by tracking_id. This is useful for when you are coordinating with an external system and want to use the tracking_id to identify the chunk. If deleting a root chunk which has a collision, the most recently created collision will become a new root chunk.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} trackingId tracking_id of the chunk you want to delete
     * @param {module:api/ChunkApi~deleteChunkByTrackingIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChunkByTrackingId(tRDataset, trackingId, callback) {
      let postBody = null;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling deleteChunkByTrackingId");
      }
      // verify the required parameter 'trackingId' is set
      if (trackingId === undefined || trackingId === null) {
        throw new Error("Missing the required parameter 'trackingId' when calling deleteChunkByTrackingId");
      }

      let pathParams = {
        'tracking_id': trackingId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/chunk/tracking_id/{tracking_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateOffChunks operation.
     * @callback module:api/ChunkApi~generateOffChunksCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RAG on Specified Chunks
     * RAG on Specified Chunks  This endpoint exists as an alternative to the topic+message concept where our API handles chat memory. With this endpoint, the user is responsible for providing the context window and the prompt. See more in the \"search before generate\" page at docs.trieve.ai.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/GenerateChunksRequest} generateChunksRequest JSON request payload to perform RAG on some chunks (chunks)
     * @param {module:api/ChunkApi~generateOffChunksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    generateOffChunks(tRDataset, generateChunksRequest, callback) {
      let postBody = generateChunksRequest;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling generateOffChunks");
      }
      // verify the required parameter 'generateChunksRequest' is set
      if (generateChunksRequest === undefined || generateChunksRequest === null) {
        throw new Error("Missing the required parameter 'generateChunksRequest' when calling generateOffChunks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/chunk/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChunkById operation.
     * @callback module:api/ChunkApi~getChunkByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChunkMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Chunk By Id
     * Get Chunk By Id  Get a singular chunk by id.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} chunkId Id of the chunk you want to fetch.
     * @param {module:api/ChunkApi~getChunkByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChunkMetadata}
     */
    getChunkById(tRDataset, chunkId, callback) {
      let postBody = null;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling getChunkById");
      }
      // verify the required parameter 'chunkId' is set
      if (chunkId === undefined || chunkId === null) {
        throw new Error("Missing the required parameter 'chunkId' when calling getChunkById");
      }

      let pathParams = {
        'chunk_id': chunkId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChunkMetadata;
      return this.apiClient.callApi(
        '/api/chunk/{chunk_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChunkByTrackingId operation.
     * @callback module:api/ChunkApi~getChunkByTrackingIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChunkMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Chunk By Tracking Id
     * Get Chunk By Tracking Id  Get a singular chunk by tracking_id. This is useful for when you are coordinating with an external system and want to use your own id as the primary reference for a chunk.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} trackingId tracking_id of the chunk you want to fetch
     * @param {module:api/ChunkApi~getChunkByTrackingIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChunkMetadata}
     */
    getChunkByTrackingId(tRDataset, trackingId, callback) {
      let postBody = null;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling getChunkByTrackingId");
      }
      // verify the required parameter 'trackingId' is set
      if (trackingId === undefined || trackingId === null) {
        throw new Error("Missing the required parameter 'trackingId' when calling getChunkByTrackingId");
      }

      let pathParams = {
        'tracking_id': trackingId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChunkMetadata;
      return this.apiClient.callApi(
        '/api/chunk/tracking_id/{tracking_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecommendedChunks operation.
     * @callback module:api/ChunkApi~getRecommendedChunksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChunkMetadataWithFileData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recommended Chunks
     * Get Recommended Chunks  Get recommendations of chunks similar to the chunks in the request. Think about this as a feature similar to the \"add to playlist\" recommendation feature on Spotify. This request pairs especially well with our groups endpoint.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/RecommendChunksRequest} recommendChunksRequest JSON request payload to get recommendations of chunks similar to the chunks in the request
     * @param {module:api/ChunkApi~getRecommendedChunksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChunkMetadataWithFileData>}
     */
    getRecommendedChunks(tRDataset, recommendChunksRequest, callback) {
      let postBody = recommendChunksRequest;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling getRecommendedChunks");
      }
      // verify the required parameter 'recommendChunksRequest' is set
      if (recommendChunksRequest === undefined || recommendChunksRequest === null) {
        throw new Error("Missing the required parameter 'recommendChunksRequest' when calling getRecommendedChunks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ChunkMetadataWithFileData];
      return this.apiClient.callApi(
        '/api/chunk/recommend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchChunk operation.
     * @callback module:api/ChunkApi~searchChunkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchChunkQueryResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search
     * Search  This route provides the primary search functionality for the API. It can be used to search for chunks by semantic similarity, full-text similarity, or a combination of both. Results' `chunk_html` values will be modified with `<b>` tags for sub-sentence highlighting.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/SearchChunkData} searchChunkData JSON request payload to semantically search for chunks (chunks)
     * @param {module:api/ChunkApi~searchChunkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchChunkQueryResponseBody}
     */
    searchChunk(tRDataset, searchChunkData, callback) {
      let postBody = searchChunkData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling searchChunk");
      }
      // verify the required parameter 'searchChunkData' is set
      if (searchChunkData === undefined || searchChunkData === null) {
        throw new Error("Missing the required parameter 'searchChunkData' when calling searchChunk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchChunkQueryResponseBody;
      return this.apiClient.callApi(
        '/api/chunk/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChunk operation.
     * @callback module:api/ChunkApi~updateChunkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Chunk
     * Update Chunk  Update a chunk. If you try to change the tracking_id of the chunk to have the same tracking_id as an existing chunk, the request will fail.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/UpdateChunkData} updateChunkData JSON request payload to update a chunk (chunk)
     * @param {module:api/ChunkApi~updateChunkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateChunk(tRDataset, updateChunkData, callback) {
      let postBody = updateChunkData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling updateChunk");
      }
      // verify the required parameter 'updateChunkData' is set
      if (updateChunkData === undefined || updateChunkData === null) {
        throw new Error("Missing the required parameter 'updateChunkData' when calling updateChunk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/chunk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChunkByTrackingId operation.
     * @callback module:api/ChunkApi~updateChunkByTrackingIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Chunk By Tracking Id
     * Update Chunk By Tracking Id  Update a chunk by tracking_id. This is useful for when you are coordinating with an external system and want to use the tracking_id to identify the chunk.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/UpdateChunkByTrackingIdData} updateChunkByTrackingIdData JSON request payload to update a chunk by tracking_id (chunks)
     * @param {module:api/ChunkApi~updateChunkByTrackingIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateChunkByTrackingId(tRDataset, updateChunkByTrackingIdData, callback) {
      let postBody = updateChunkByTrackingIdData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling updateChunkByTrackingId");
      }
      // verify the required parameter 'updateChunkByTrackingIdData' is set
      if (updateChunkByTrackingIdData === undefined || updateChunkByTrackingIdData === null) {
        throw new Error("Missing the required parameter 'updateChunkByTrackingIdData' when calling updateChunkByTrackingId");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/chunk/tracking_id/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
