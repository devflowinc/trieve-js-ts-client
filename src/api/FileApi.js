/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponseBody from '../model/ErrorResponseBody';
import FileDTO from '../model/FileDTO';
import UploadFileData from '../model/UploadFileData';
import UploadFileResult from '../model/UploadFileResult';

/**
* File service.
* @module api/FileApi
* @version 0.5.0
*/
export default class FileApi {

    /**
    * Constructs a new FileApi. 
    * @alias module:api/FileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteFileHandler operation.
     * @callback module:api/FileApi~deleteFileHandlerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete File
     * Delete File  Delete a file from S3 attached to the server based on its id. This will disassociate chunks from the file, but will not delete the chunks. We plan to add support for deleting chunks in a release soon. Auth'ed user must be an admin or owner of the dataset's organization to upload a file.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} fileId The id of the file to delete
     * @param {Boolean} deleteChunks Whether or not to delete the chunks associated with the file
     * @param {module:api/FileApi~deleteFileHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFileHandler(tRDataset, fileId, deleteChunks, callback) {
      let postBody = null;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling deleteFileHandler");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteFileHandler");
      }
      // verify the required parameter 'deleteChunks' is set
      if (deleteChunks === undefined || deleteChunks === null) {
        throw new Error("Missing the required parameter 'deleteChunks' when calling deleteFileHandler");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
        'delete_chunks': deleteChunks
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/file/{file_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasetFilesHandler operation.
     * @callback module:api/FileApi~getDatasetFilesHandlerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<File>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Files for Dataset
     * Get Files for Dataset  Get all files which belong to a given dataset specified by the dataset_id parameter. 10 files are returned per page.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} datasetId The id of the dataset to fetch files for.
     * @param {Number} page The page number of files you wish to fetch. Each page contains at most 10 files.
     * @param {module:api/FileApi~getDatasetFilesHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<File>}
     */
    getDatasetFilesHandler(tRDataset, datasetId, page, callback) {
      let postBody = null;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling getDatasetFilesHandler");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getDatasetFilesHandler");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getDatasetFilesHandler");
      }

      let pathParams = {
        'dataset_id': datasetId,
        'page': page
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [File];
      return this.apiClient.callApi(
        '/api/dataset/files/{dataset_id}/{page}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileHandler operation.
     * @callback module:api/FileApi~getFileHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get File
     * Get File  Download a file from S3 attached to the server based on its id. We plan to add support for getting signed S3 URLs to download from S3 directly in a release soon.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {String} fileId The id of the file to fetch
     * @param {module:api/FileApi~getFileHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileDTO}
     */
    getFileHandler(tRDataset, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling getFileHandler");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFileHandler");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileDTO;
      return this.apiClient.callApi(
        '/api/file/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFileHandler operation.
     * @callback module:api/FileApi~uploadFileHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadFileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload File
     * Upload File  Upload a file to S3 attached to the server. The file will be converted to HTML with tika and chunked algorithmically, images will be OCR'ed with tesseract. The resulting chunks will be indexed and searchable. Optionally, you can only upload the file and manually create chunks associated to the file after. See docs.trieve.ai and/or contact us for more details and tips. Auth'ed user must be an admin or owner of the dataset's organization to upload a file.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/UploadFileData} uploadFileData JSON request payload to upload a file
     * @param {module:api/FileApi~uploadFileHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadFileResult}
     */
    uploadFileHandler(tRDataset, uploadFileData, callback) {
      let postBody = uploadFileData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling uploadFileHandler");
      }
      // verify the required parameter 'uploadFileData' is set
      if (uploadFileData === undefined || uploadFileData === null) {
        throw new Error("Missing the required parameter 'uploadFileData' when calling uploadFileHandler");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UploadFileResult;
      return this.apiClient.callApi(
        '/api/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
