/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateTopicData from '../model/CreateTopicData';
import DeleteTopicData from '../model/DeleteTopicData';
import ErrorResponseBody from '../model/ErrorResponseBody';
import Topic from '../model/Topic';
import UpdateTopicData from '../model/UpdateTopicData';

/**
* Topic service.
* @module api/TopicApi
* @version 0.5.0
*/
export default class TopicApi {

    /**
    * Constructs a new TopicApi. 
    * @alias module:api/TopicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTopic operation.
     * @callback module:api/TopicApi~createTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Topic
     * Create Topic  Create a new chat topic. Topics are attached to a user and act as a coordinator for memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/CreateTopicData} createTopicData JSON request payload to create chat topic
     * @param {module:api/TopicApi~createTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Topic}
     */
    createTopic(tRDataset, createTopicData, callback) {
      let postBody = createTopicData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling createTopic");
      }
      // verify the required parameter 'createTopicData' is set
      if (createTopicData === undefined || createTopicData === null) {
        throw new Error("Missing the required parameter 'createTopicData' when calling createTopic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Topic;
      return this.apiClient.callApi(
        '/api/topic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTopic operation.
     * @callback module:api/TopicApi~deleteTopicCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Topic
     * Delete Topic  Delete an existing chat topic. When a topic is deleted, all associated chat messages are also deleted.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/DeleteTopicData} deleteTopicData JSON request payload to delete a chat topic
     * @param {module:api/TopicApi~deleteTopicCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTopic(tRDataset, deleteTopicData, callback) {
      let postBody = deleteTopicData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling deleteTopic");
      }
      // verify the required parameter 'deleteTopicData' is set
      if (deleteTopicData === undefined || deleteTopicData === null) {
        throw new Error("Missing the required parameter 'deleteTopicData' when calling deleteTopic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/topic', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllTopicsForUser operation.
     * @callback module:api/TopicApi~getAllTopicsForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Topic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Topics for User
     * Get All Topics for User  Get all topics belonging to a the auth'ed user. Soon, we plan to allow specification of the user for this route and include pagination.
     * @param {String} userId The id of the user to get topics for
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:api/TopicApi~getAllTopicsForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Topic>}
     */
    getAllTopicsForUser(userId, tRDataset, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAllTopicsForUser");
      }
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling getAllTopicsForUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Topic];
      return this.apiClient.callApi(
        '/api/topic/user/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTopic operation.
     * @callback module:api/TopicApi~updateTopicCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Topic
     * Update Topic  Update an existing chat topic. Currently, only the name of the topic can be updated.
     * @param {String} tRDataset The dataset id to use for the request
     * @param {module:model/UpdateTopicData} updateTopicData JSON request payload to update a chat topic
     * @param {module:api/TopicApi~updateTopicCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTopic(tRDataset, updateTopicData, callback) {
      let postBody = updateTopicData;
      // verify the required parameter 'tRDataset' is set
      if (tRDataset === undefined || tRDataset === null) {
        throw new Error("Missing the required parameter 'tRDataset' when calling updateTopic");
      }
      // verify the required parameter 'updateTopicData' is set
      if (updateTopicData === undefined || updateTopicData === null) {
        throw new Error("Missing the required parameter 'updateTopicData' when calling updateTopic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TR-Dataset': tRDataset
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/topic', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
