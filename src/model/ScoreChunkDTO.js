/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChunkMetadataWithFileData from './ChunkMetadataWithFileData';

/**
 * The ScoreChunkDTO model module.
 * @module model/ScoreChunkDTO
 * @version 0.5.0
 */
class ScoreChunkDTO {
    /**
     * Constructs a new <code>ScoreChunkDTO</code>.
     * @alias module:model/ScoreChunkDTO
     * @param metadata {Array.<module:model/ChunkMetadataWithFileData>} 
     * @param score {Number} 
     */
    constructor(metadata, score) { 
        
        ScoreChunkDTO.initialize(this, metadata, score);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, metadata, score) { 
        obj['metadata'] = metadata;
        obj['score'] = score;
    }

    /**
     * Constructs a <code>ScoreChunkDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScoreChunkDTO} obj Optional instance to populate.
     * @return {module:model/ScoreChunkDTO} The populated <code>ScoreChunkDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScoreChunkDTO();

            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [ChunkMetadataWithFileData]);
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScoreChunkDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScoreChunkDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ScoreChunkDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                ChunkMetadataWithFileData.validateJSON(item);
            };
        }

        return true;
    }


}

ScoreChunkDTO.RequiredProperties = ["metadata", "score"];

/**
 * @member {Array.<module:model/ChunkMetadataWithFileData>} metadata
 */
ScoreChunkDTO.prototype['metadata'] = undefined;

/**
 * @member {Number} score
 */
ScoreChunkDTO.prototype['score'] = undefined;






export default ScoreChunkDTO;

