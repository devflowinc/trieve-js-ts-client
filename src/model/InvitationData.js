/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InvitationData model module.
 * @module model/InvitationData
 * @version 0.5.0
 */
class InvitationData {
    /**
     * Constructs a new <code>InvitationData</code>.
     * @alias module:model/InvitationData
     * @param appUrl {String} The url of the app that the user will be directed to in order to set their password. Usually admin.trieve.ai, but may differ for local dev or self-hosted setups.
     * @param email {String} The email of the user to invite. Must be a valid email as they will be sent an email to register.
     * @param organizationId {String} The id of the organization to invite the user to.
     * @param redirectUri {String} The url that the user will be redirected to after setting their password.
     * @param userRole {Number} The role the user will have in the organization. 0 = User, 1 = Admin, 2 = Owner.
     */
    constructor(appUrl, email, organizationId, redirectUri, userRole) { 
        
        InvitationData.initialize(this, appUrl, email, organizationId, redirectUri, userRole);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appUrl, email, organizationId, redirectUri, userRole) { 
        obj['app_url'] = appUrl;
        obj['email'] = email;
        obj['organization_id'] = organizationId;
        obj['redirect_uri'] = redirectUri;
        obj['user_role'] = userRole;
    }

    /**
     * Constructs a <code>InvitationData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InvitationData} obj Optional instance to populate.
     * @return {module:model/InvitationData} The populated <code>InvitationData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvitationData();

            if (data.hasOwnProperty('app_url')) {
                obj['app_url'] = ApiClient.convertToType(data['app_url'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('organization_id')) {
                obj['organization_id'] = ApiClient.convertToType(data['organization_id'], 'String');
            }
            if (data.hasOwnProperty('redirect_uri')) {
                obj['redirect_uri'] = ApiClient.convertToType(data['redirect_uri'], 'String');
            }
            if (data.hasOwnProperty('user_role')) {
                obj['user_role'] = ApiClient.convertToType(data['user_role'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InvitationData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InvitationData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InvitationData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['app_url'] && !(typeof data['app_url'] === 'string' || data['app_url'] instanceof String)) {
            throw new Error("Expected the field `app_url` to be a primitive type in the JSON string but got " + data['app_url']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['organization_id'] && !(typeof data['organization_id'] === 'string' || data['organization_id'] instanceof String)) {
            throw new Error("Expected the field `organization_id` to be a primitive type in the JSON string but got " + data['organization_id']);
        }
        // ensure the json data is a string
        if (data['redirect_uri'] && !(typeof data['redirect_uri'] === 'string' || data['redirect_uri'] instanceof String)) {
            throw new Error("Expected the field `redirect_uri` to be a primitive type in the JSON string but got " + data['redirect_uri']);
        }

        return true;
    }


}

InvitationData.RequiredProperties = ["app_url", "email", "organization_id", "redirect_uri", "user_role"];

/**
 * The url of the app that the user will be directed to in order to set their password. Usually admin.trieve.ai, but may differ for local dev or self-hosted setups.
 * @member {String} app_url
 */
InvitationData.prototype['app_url'] = undefined;

/**
 * The email of the user to invite. Must be a valid email as they will be sent an email to register.
 * @member {String} email
 */
InvitationData.prototype['email'] = undefined;

/**
 * The id of the organization to invite the user to.
 * @member {String} organization_id
 */
InvitationData.prototype['organization_id'] = undefined;

/**
 * The url that the user will be redirected to after setting their password.
 * @member {String} redirect_uri
 */
InvitationData.prototype['redirect_uri'] = undefined;

/**
 * The role the user will have in the organization. 0 = User, 1 = Admin, 2 = Owner.
 * @member {Number} user_role
 */
InvitationData.prototype['user_role'] = undefined;






export default InvitationData;

