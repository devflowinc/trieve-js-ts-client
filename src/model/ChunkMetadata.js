/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChunkMetadata model module.
 * @module model/ChunkMetadata
 * @version 0.5.0
 */
class ChunkMetadata {
    /**
     * Constructs a new <code>ChunkMetadata</code>.
     * @alias module:model/ChunkMetadata
     * @param content {String} 
     * @param createdAt {Date} 
     * @param datasetId {String} 
     * @param id {String} 
     * @param updatedAt {Date} 
     * @param weight {Number} 
     */
    constructor(content, createdAt, datasetId, id, updatedAt, weight) { 
        
        ChunkMetadata.initialize(this, content, createdAt, datasetId, id, updatedAt, weight);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, content, createdAt, datasetId, id, updatedAt, weight) { 
        obj['content'] = content;
        obj['created_at'] = createdAt;
        obj['dataset_id'] = datasetId;
        obj['id'] = id;
        obj['updated_at'] = updatedAt;
        obj['weight'] = weight;
    }

    /**
     * Constructs a <code>ChunkMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChunkMetadata} obj Optional instance to populate.
     * @return {module:model/ChunkMetadata} The populated <code>ChunkMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChunkMetadata();

            if (data.hasOwnProperty('chunk_html')) {
                obj['chunk_html'] = ApiClient.convertToType(data['chunk_html'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('dataset_id')) {
                obj['dataset_id'] = ApiClient.convertToType(data['dataset_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('qdrant_point_id')) {
                obj['qdrant_point_id'] = ApiClient.convertToType(data['qdrant_point_id'], 'String');
            }
            if (data.hasOwnProperty('tag_set')) {
                obj['tag_set'] = ApiClient.convertToType(data['tag_set'], 'String');
            }
            if (data.hasOwnProperty('time_stamp')) {
                obj['time_stamp'] = ApiClient.convertToType(data['time_stamp'], 'Date');
            }
            if (data.hasOwnProperty('tracking_id')) {
                obj['tracking_id'] = ApiClient.convertToType(data['tracking_id'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChunkMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChunkMetadata</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChunkMetadata.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['chunk_html'] && !(typeof data['chunk_html'] === 'string' || data['chunk_html'] instanceof String)) {
            throw new Error("Expected the field `chunk_html` to be a primitive type in the JSON string but got " + data['chunk_html']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['dataset_id'] && !(typeof data['dataset_id'] === 'string' || data['dataset_id'] instanceof String)) {
            throw new Error("Expected the field `dataset_id` to be a primitive type in the JSON string but got " + data['dataset_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['qdrant_point_id'] && !(typeof data['qdrant_point_id'] === 'string' || data['qdrant_point_id'] instanceof String)) {
            throw new Error("Expected the field `qdrant_point_id` to be a primitive type in the JSON string but got " + data['qdrant_point_id']);
        }
        // ensure the json data is a string
        if (data['tag_set'] && !(typeof data['tag_set'] === 'string' || data['tag_set'] instanceof String)) {
            throw new Error("Expected the field `tag_set` to be a primitive type in the JSON string but got " + data['tag_set']);
        }
        // ensure the json data is a string
        if (data['tracking_id'] && !(typeof data['tracking_id'] === 'string' || data['tracking_id'] instanceof String)) {
            throw new Error("Expected the field `tracking_id` to be a primitive type in the JSON string but got " + data['tracking_id']);
        }

        return true;
    }


}

ChunkMetadata.RequiredProperties = ["content", "created_at", "dataset_id", "id", "updated_at", "weight"];

/**
 * @member {String} chunk_html
 */
ChunkMetadata.prototype['chunk_html'] = undefined;

/**
 * @member {String} content
 */
ChunkMetadata.prototype['content'] = undefined;

/**
 * @member {Date} created_at
 */
ChunkMetadata.prototype['created_at'] = undefined;

/**
 * @member {String} dataset_id
 */
ChunkMetadata.prototype['dataset_id'] = undefined;

/**
 * @member {String} id
 */
ChunkMetadata.prototype['id'] = undefined;

/**
 * @member {String} link
 */
ChunkMetadata.prototype['link'] = undefined;

/**
 * @member {Object} metadata
 */
ChunkMetadata.prototype['metadata'] = undefined;

/**
 * @member {String} qdrant_point_id
 */
ChunkMetadata.prototype['qdrant_point_id'] = undefined;

/**
 * @member {String} tag_set
 */
ChunkMetadata.prototype['tag_set'] = undefined;

/**
 * @member {Date} time_stamp
 */
ChunkMetadata.prototype['time_stamp'] = undefined;

/**
 * @member {String} tracking_id
 */
ChunkMetadata.prototype['tracking_id'] = undefined;

/**
 * @member {Date} updated_at
 */
ChunkMetadata.prototype['updated_at'] = undefined;

/**
 * @member {Number} weight
 */
ChunkMetadata.prototype['weight'] = undefined;






export default ChunkMetadata;

