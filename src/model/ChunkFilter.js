/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldCondition from './FieldCondition';

/**
 * The ChunkFilter model module.
 * @module model/ChunkFilter
 * @version 0.5.0
 */
class ChunkFilter {
    /**
     * Constructs a new <code>ChunkFilter</code>.
     * @alias module:model/ChunkFilter
     */
    constructor() { 
        
        ChunkFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChunkFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChunkFilter} obj Optional instance to populate.
     * @return {module:model/ChunkFilter} The populated <code>ChunkFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChunkFilter();

            if (data.hasOwnProperty('must')) {
                obj['must'] = ApiClient.convertToType(data['must'], [FieldCondition]);
            }
            if (data.hasOwnProperty('must_not')) {
                obj['must_not'] = ApiClient.convertToType(data['must_not'], [FieldCondition]);
            }
            if (data.hasOwnProperty('should')) {
                obj['should'] = ApiClient.convertToType(data['should'], [FieldCondition]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChunkFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChunkFilter</code>.
     */
    static validateJSON(data) {
        if (data['must']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['must'])) {
                throw new Error("Expected the field `must` to be an array in the JSON data but got " + data['must']);
            }
            // validate the optional field `must` (array)
            for (const item of data['must']) {
                FieldCondition.validateJSON(item);
            };
        }
        if (data['must_not']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['must_not'])) {
                throw new Error("Expected the field `must_not` to be an array in the JSON data but got " + data['must_not']);
            }
            // validate the optional field `must_not` (array)
            for (const item of data['must_not']) {
                FieldCondition.validateJSON(item);
            };
        }
        if (data['should']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['should'])) {
                throw new Error("Expected the field `should` to be an array in the JSON data but got " + data['should']);
            }
            // validate the optional field `should` (array)
            for (const item of data['should']) {
                FieldCondition.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * All of these field conditions have to match for the chunk to be included in the result set.
 * @member {Array.<module:model/FieldCondition>} must
 */
ChunkFilter.prototype['must'] = undefined;

/**
 * None of these field conditions can match for the chunk to be included in the result set.
 * @member {Array.<module:model/FieldCondition>} must_not
 */
ChunkFilter.prototype['must_not'] = undefined;

/**
 * Only one of these field conditions has to match for the chunk to be included in the result set.
 * @member {Array.<module:model/FieldCondition>} should
 */
ChunkFilter.prototype['should'] = undefined;






export default ChunkFilter;

