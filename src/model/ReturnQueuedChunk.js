/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BatchQueuedChunkResponse from './BatchQueuedChunkResponse';
import ChunkMetadata from './ChunkMetadata';
import SingleQueuedChunkResponse from './SingleQueuedChunkResponse';

/**
 * The ReturnQueuedChunk model module.
 * @module model/ReturnQueuedChunk
 * @version 0.5.0
 */
class ReturnQueuedChunk {
    /**
     * Constructs a new <code>ReturnQueuedChunk</code>.
     * @alias module:model/ReturnQueuedChunk
     * @param {(module:model/BatchQueuedChunkResponse|module:model/SingleQueuedChunkResponse)} instance The actual instance to initialize ReturnQueuedChunk.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SingleQueuedChunkResponse") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SingleQueuedChunkResponse.validateJSON(instance); // throw an exception if no match
                // create SingleQueuedChunkResponse from JS object
                this.actualInstance = SingleQueuedChunkResponse.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SingleQueuedChunkResponse
            errorMessages.push("Failed to construct SingleQueuedChunkResponse: " + err)
        }

        try {
            if (typeof instance === "BatchQueuedChunkResponse") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                BatchQueuedChunkResponse.validateJSON(instance); // throw an exception if no match
                // create BatchQueuedChunkResponse from JS object
                this.actualInstance = BatchQueuedChunkResponse.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into BatchQueuedChunkResponse
            errorMessages.push("Failed to construct BatchQueuedChunkResponse: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `ReturnQueuedChunk` with oneOf schemas BatchQueuedChunkResponse, SingleQueuedChunkResponse. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `ReturnQueuedChunk` with oneOf schemas BatchQueuedChunkResponse, SingleQueuedChunkResponse. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>ReturnQueuedChunk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReturnQueuedChunk} obj Optional instance to populate.
     * @return {module:model/ReturnQueuedChunk} The populated <code>ReturnQueuedChunk</code> instance.
     */
    static constructFromObject(data, obj) {
        return new ReturnQueuedChunk(data);
    }

    /**
     * Gets the actual instance, which can be <code>BatchQueuedChunkResponse</code>, <code>SingleQueuedChunkResponse</code>.
     * @return {(module:model/BatchQueuedChunkResponse|module:model/SingleQueuedChunkResponse)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>BatchQueuedChunkResponse</code>, <code>SingleQueuedChunkResponse</code>.
     * @param {(module:model/BatchQueuedChunkResponse|module:model/SingleQueuedChunkResponse)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = ReturnQueuedChunk.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of ReturnQueuedChunk from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/ReturnQueuedChunk} An instance of ReturnQueuedChunk.
     */
    static fromJSON = function(json_string){
        return ReturnQueuedChunk.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {Array.<module:model/ChunkMetadata>} chunk_metadata
 */
ReturnQueuedChunk.prototype['chunk_metadata'] = undefined;

/**
 * The current position the last access item is in the queue
 * @member {Number} pos_in_queue
 */
ReturnQueuedChunk.prototype['pos_in_queue'] = undefined;


ReturnQueuedChunk.OneOf = ["BatchQueuedChunkResponse", "SingleQueuedChunkResponse"];

export default ReturnQueuedChunk;

