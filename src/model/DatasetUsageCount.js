/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatasetUsageCount model module.
 * @module model/DatasetUsageCount
 * @version 0.5.0
 */
class DatasetUsageCount {
    /**
     * Constructs a new <code>DatasetUsageCount</code>.
     * @alias module:model/DatasetUsageCount
     * @param chunkCount {Number} 
     * @param datasetId {String} 
     * @param id {String} 
     */
    constructor(chunkCount, datasetId, id) { 
        
        DatasetUsageCount.initialize(this, chunkCount, datasetId, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chunkCount, datasetId, id) { 
        obj['chunk_count'] = chunkCount;
        obj['dataset_id'] = datasetId;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>DatasetUsageCount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatasetUsageCount} obj Optional instance to populate.
     * @return {module:model/DatasetUsageCount} The populated <code>DatasetUsageCount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatasetUsageCount();

            if (data.hasOwnProperty('chunk_count')) {
                obj['chunk_count'] = ApiClient.convertToType(data['chunk_count'], 'Number');
            }
            if (data.hasOwnProperty('dataset_id')) {
                obj['dataset_id'] = ApiClient.convertToType(data['dataset_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatasetUsageCount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatasetUsageCount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DatasetUsageCount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dataset_id'] && !(typeof data['dataset_id'] === 'string' || data['dataset_id'] instanceof String)) {
            throw new Error("Expected the field `dataset_id` to be a primitive type in the JSON string but got " + data['dataset_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

DatasetUsageCount.RequiredProperties = ["chunk_count", "dataset_id", "id"];

/**
 * @member {Number} chunk_count
 */
DatasetUsageCount.prototype['chunk_count'] = undefined;

/**
 * @member {String} dataset_id
 */
DatasetUsageCount.prototype['dataset_id'] = undefined;

/**
 * @member {String} id
 */
DatasetUsageCount.prototype['id'] = undefined;






export default DatasetUsageCount;

