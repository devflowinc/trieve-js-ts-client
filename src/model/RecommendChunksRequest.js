/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChunkFilter from './ChunkFilter';

/**
 * The RecommendChunksRequest model module.
 * @module model/RecommendChunksRequest
 * @version 0.5.0
 */
class RecommendChunksRequest {
    /**
     * Constructs a new <code>RecommendChunksRequest</code>.
     * @alias module:model/RecommendChunksRequest
     */
    constructor() { 
        
        RecommendChunksRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecommendChunksRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecommendChunksRequest} obj Optional instance to populate.
     * @return {module:model/RecommendChunksRequest} The populated <code>RecommendChunksRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecommendChunksRequest();

            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], ChunkFilter);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('negative_chunk_ids')) {
                obj['negative_chunk_ids'] = ApiClient.convertToType(data['negative_chunk_ids'], ['String']);
            }
            if (data.hasOwnProperty('negative_tracking_ids')) {
                obj['negative_tracking_ids'] = ApiClient.convertToType(data['negative_tracking_ids'], ['String']);
            }
            if (data.hasOwnProperty('positive_chunk_ids')) {
                obj['positive_chunk_ids'] = ApiClient.convertToType(data['positive_chunk_ids'], ['String']);
            }
            if (data.hasOwnProperty('positive_tracking_ids')) {
                obj['positive_tracking_ids'] = ApiClient.convertToType(data['positive_tracking_ids'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecommendChunksRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecommendChunksRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `filters`
        if (data['filters']) { // data not null
          ChunkFilter.validateJSON(data['filters']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['negative_chunk_ids'])) {
            throw new Error("Expected the field `negative_chunk_ids` to be an array in the JSON data but got " + data['negative_chunk_ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['negative_tracking_ids'])) {
            throw new Error("Expected the field `negative_tracking_ids` to be an array in the JSON data but got " + data['negative_tracking_ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['positive_chunk_ids'])) {
            throw new Error("Expected the field `positive_chunk_ids` to be an array in the JSON data but got " + data['positive_chunk_ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['positive_tracking_ids'])) {
            throw new Error("Expected the field `positive_tracking_ids` to be an array in the JSON data but got " + data['positive_tracking_ids']);
        }

        return true;
    }


}



/**
 * @member {module:model/ChunkFilter} filters
 */
RecommendChunksRequest.prototype['filters'] = undefined;

/**
 * The number of chunks to return. This is the number of chunks which will be returned in the response. The default is 10.
 * @member {Number} limit
 */
RecommendChunksRequest.prototype['limit'] = undefined;

/**
 * The ids of the chunks to be used as negative examples for the recommendation. The chunks in this array will be used to filter out similar chunks.
 * @member {Array.<String>} negative_chunk_ids
 */
RecommendChunksRequest.prototype['negative_chunk_ids'] = undefined;

/**
 * The tracking_ids of the chunks to be used as negative examples for the recommendation. The chunks in this array will be used to filter out similar chunks.
 * @member {Array.<String>} negative_tracking_ids
 */
RecommendChunksRequest.prototype['negative_tracking_ids'] = undefined;

/**
 * The ids of the chunks to be used as positive examples for the recommendation. The chunks in this array will be used to find similar chunks.
 * @member {Array.<String>} positive_chunk_ids
 */
RecommendChunksRequest.prototype['positive_chunk_ids'] = undefined;

/**
 * The tracking_ids of the chunks to be used as positive examples for the recommendation. The chunks in this array will be used to find similar chunks.
 * @member {Array.<String>} positive_tracking_ids
 */
RecommendChunksRequest.prototype['positive_tracking_ids'] = undefined;






export default RecommendChunksRequest;

