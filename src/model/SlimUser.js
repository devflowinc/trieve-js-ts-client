/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Organization from './Organization';
import UserOrganization from './UserOrganization';

/**
 * The SlimUser model module.
 * @module model/SlimUser
 * @version 0.5.0
 */
class SlimUser {
    /**
     * Constructs a new <code>SlimUser</code>.
     * @alias module:model/SlimUser
     * @param email {String} 
     * @param id {String} 
     * @param orgs {Array.<module:model/Organization>} 
     * @param userOrgs {Array.<module:model/UserOrganization>} 
     * @param visibleEmail {Boolean} 
     */
    constructor(email, id, orgs, userOrgs, visibleEmail) { 
        
        SlimUser.initialize(this, email, id, orgs, userOrgs, visibleEmail);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, id, orgs, userOrgs, visibleEmail) { 
        obj['email'] = email;
        obj['id'] = id;
        obj['orgs'] = orgs;
        obj['user_orgs'] = userOrgs;
        obj['visible_email'] = visibleEmail;
    }

    /**
     * Constructs a <code>SlimUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlimUser} obj Optional instance to populate.
     * @return {module:model/SlimUser} The populated <code>SlimUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlimUser();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('orgs')) {
                obj['orgs'] = ApiClient.convertToType(data['orgs'], [Organization]);
            }
            if (data.hasOwnProperty('user_orgs')) {
                obj['user_orgs'] = ApiClient.convertToType(data['user_orgs'], [UserOrganization]);
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('visible_email')) {
                obj['visible_email'] = ApiClient.convertToType(data['visible_email'], 'Boolean');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlimUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlimUser</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SlimUser.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['orgs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orgs'])) {
                throw new Error("Expected the field `orgs` to be an array in the JSON data but got " + data['orgs']);
            }
            // validate the optional field `orgs` (array)
            for (const item of data['orgs']) {
                Organization.validateJSON(item);
            };
        }
        if (data['user_orgs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['user_orgs'])) {
                throw new Error("Expected the field `user_orgs` to be an array in the JSON data but got " + data['user_orgs']);
            }
            // validate the optional field `user_orgs` (array)
            for (const item of data['user_orgs']) {
                UserOrganization.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}

SlimUser.RequiredProperties = ["email", "id", "orgs", "user_orgs", "visible_email"];

/**
 * @member {String} email
 */
SlimUser.prototype['email'] = undefined;

/**
 * @member {String} id
 */
SlimUser.prototype['id'] = undefined;

/**
 * @member {String} name
 */
SlimUser.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/Organization>} orgs
 */
SlimUser.prototype['orgs'] = undefined;

/**
 * @member {Array.<module:model/UserOrganization>} user_orgs
 */
SlimUser.prototype['user_orgs'] = undefined;

/**
 * @member {String} username
 */
SlimUser.prototype['username'] = undefined;

/**
 * @member {Boolean} visible_email
 */
SlimUser.prototype['visible_email'] = undefined;

/**
 * @member {String} website
 */
SlimUser.prototype['website'] = undefined;






export default SlimUser;

