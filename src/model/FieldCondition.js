/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MatchCondition from './MatchCondition';
import Range from './Range';

/**
 * The FieldCondition model module.
 * @module model/FieldCondition
 * @version 0.5.0
 */
class FieldCondition {
    /**
     * Constructs a new <code>FieldCondition</code>.
     * @alias module:model/FieldCondition
     * @param field {String} Field is the name of the field to filter on. The field value will be used to check for an exact substring match on the metadata values for each existing chunk. This is useful for when you want to filter chunks by arbitrary metadata. To access fields inside of the metadata that you provide with the card, prefix the field name with `metadata.`.
     */
    constructor(field) { 
        
        FieldCondition.initialize(this, field);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, field) { 
        obj['field'] = field;
    }

    /**
     * Constructs a <code>FieldCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldCondition} obj Optional instance to populate.
     * @return {module:model/FieldCondition} The populated <code>FieldCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldCondition();

            if (data.hasOwnProperty('field')) {
                obj['field'] = ApiClient.convertToType(data['field'], 'String');
            }
            if (data.hasOwnProperty('match')) {
                obj['match'] = ApiClient.convertToType(data['match'], [MatchCondition]);
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = ApiClient.convertToType(data['range'], Range);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FieldCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FieldCondition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FieldCondition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['field'] && !(typeof data['field'] === 'string' || data['field'] instanceof String)) {
            throw new Error("Expected the field `field` to be a primitive type in the JSON string but got " + data['field']);
        }
        if (data['match']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['match'])) {
                throw new Error("Expected the field `match` to be an array in the JSON data but got " + data['match']);
            }
            // validate the optional field `match` (array)
            for (const item of data['match']) {
                MatchCondition.validateJSON(item);
            };
        }
        // validate the optional field `range`
        if (data['range']) { // data not null
          Range.validateJSON(data['range']);
        }

        return true;
    }


}

FieldCondition.RequiredProperties = ["field"];

/**
 * Field is the name of the field to filter on. The field value will be used to check for an exact substring match on the metadata values for each existing chunk. This is useful for when you want to filter chunks by arbitrary metadata. To access fields inside of the metadata that you provide with the card, prefix the field name with `metadata.`.
 * @member {String} field
 */
FieldCondition.prototype['field'] = undefined;

/**
 * Match is the value to match on the field. The match value will be used to check for an exact substring match on the metadata values for each existing chunk. This is useful for when you want to filter chunks by arbitrary metadata.
 * @member {Array.<module:model/MatchCondition>} match
 */
FieldCondition.prototype['match'] = undefined;

/**
 * @member {module:model/Range} range
 */
FieldCondition.prototype['range'] = undefined;






export default FieldCondition;

