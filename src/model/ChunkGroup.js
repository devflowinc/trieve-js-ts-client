/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChunkGroup model module.
 * @module model/ChunkGroup
 * @version 0.5.0
 */
class ChunkGroup {
    /**
     * Constructs a new <code>ChunkGroup</code>.
     * @alias module:model/ChunkGroup
     * @param createdAt {Date} 
     * @param datasetId {String} 
     * @param description {String} 
     * @param id {String} 
     * @param name {String} 
     * @param updatedAt {Date} 
     */
    constructor(createdAt, datasetId, description, id, name, updatedAt) { 
        
        ChunkGroup.initialize(this, createdAt, datasetId, description, id, name, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, datasetId, description, id, name, updatedAt) { 
        obj['created_at'] = createdAt;
        obj['dataset_id'] = datasetId;
        obj['description'] = description;
        obj['id'] = id;
        obj['name'] = name;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>ChunkGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChunkGroup} obj Optional instance to populate.
     * @return {module:model/ChunkGroup} The populated <code>ChunkGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChunkGroup();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('dataset_id')) {
                obj['dataset_id'] = ApiClient.convertToType(data['dataset_id'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tracking_id')) {
                obj['tracking_id'] = ApiClient.convertToType(data['tracking_id'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChunkGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChunkGroup</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChunkGroup.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dataset_id'] && !(typeof data['dataset_id'] === 'string' || data['dataset_id'] instanceof String)) {
            throw new Error("Expected the field `dataset_id` to be a primitive type in the JSON string but got " + data['dataset_id']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tracking_id'] && !(typeof data['tracking_id'] === 'string' || data['tracking_id'] instanceof String)) {
            throw new Error("Expected the field `tracking_id` to be a primitive type in the JSON string but got " + data['tracking_id']);
        }

        return true;
    }


}

ChunkGroup.RequiredProperties = ["created_at", "dataset_id", "description", "id", "name", "updated_at"];

/**
 * @member {Date} created_at
 */
ChunkGroup.prototype['created_at'] = undefined;

/**
 * @member {String} dataset_id
 */
ChunkGroup.prototype['dataset_id'] = undefined;

/**
 * @member {String} description
 */
ChunkGroup.prototype['description'] = undefined;

/**
 * @member {String} id
 */
ChunkGroup.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ChunkGroup.prototype['name'] = undefined;

/**
 * @member {String} tracking_id
 */
ChunkGroup.prototype['tracking_id'] = undefined;

/**
 * @member {Date} updated_at
 */
ChunkGroup.prototype['updated_at'] = undefined;






export default ChunkGroup;

