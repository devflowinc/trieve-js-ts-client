/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateTopicData model module.
 * @module model/CreateTopicData
 * @version 0.5.0
 */
class CreateTopicData {
    /**
     * Constructs a new <code>CreateTopicData</code>.
     * @alias module:model/CreateTopicData
     */
    constructor() { 
        
        CreateTopicData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateTopicData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateTopicData} obj Optional instance to populate.
     * @return {module:model/CreateTopicData} The populated <code>CreateTopicData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateTopicData();

            if (data.hasOwnProperty('first_user_message')) {
                obj['first_user_message'] = ApiClient.convertToType(data['first_user_message'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateTopicData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateTopicData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['first_user_message'] && !(typeof data['first_user_message'] === 'string' || data['first_user_message'] instanceof String)) {
            throw new Error("Expected the field `first_user_message` to be a primitive type in the JSON string but got " + data['first_user_message']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The first message which will belong to the topic. The topic name is generated based on this message similar to how it works in the OpenAI chat UX if a name is not explicitly provided on the name request body key.
 * @member {String} first_user_message
 */
CreateTopicData.prototype['first_user_message'] = undefined;

/**
 * The model to use for the assistant's messages. This can be any model from the openrouter model list. If no model is provided, the gpt-3.5-turbo will be used.
 * @member {String} model
 */
CreateTopicData.prototype['model'] = undefined;

/**
 * The name of the topic. If this is not provided, the topic name is generated from the first_user_message.
 * @member {String} name
 */
CreateTopicData.prototype['name'] = undefined;






export default CreateTopicData;

