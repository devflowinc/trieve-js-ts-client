/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UploadFileResult model module.
 * @module model/UploadFileResult
 * @version 0.5.0
 */
class UploadFileResult {
    /**
     * Constructs a new <code>UploadFileResult</code>.
     * @alias module:model/UploadFileResult
     * @param fileMetadata {File} 
     */
    constructor(fileMetadata) { 
        
        UploadFileResult.initialize(this, fileMetadata);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fileMetadata) { 
        obj['file_metadata'] = fileMetadata;
    }

    /**
     * Constructs a <code>UploadFileResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadFileResult} obj Optional instance to populate.
     * @return {module:model/UploadFileResult} The populated <code>UploadFileResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadFileResult();

            if (data.hasOwnProperty('file_metadata')) {
                obj['file_metadata'] = File.constructFromObject(data['file_metadata']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadFileResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadFileResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UploadFileResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `file_metadata`
        if (data['file_metadata']) { // data not null
          File.validateJSON(data['file_metadata']);
        }

        return true;
    }


}

UploadFileResult.RequiredProperties = ["file_metadata"];

/**
 * @member {File} file_metadata
 */
UploadFileResult.prototype['file_metadata'] = undefined;






export default UploadFileResult;

