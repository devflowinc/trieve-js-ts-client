/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddChunkToGroupData model module.
 * @module model/AddChunkToGroupData
 * @version 0.5.0
 */
class AddChunkToGroupData {
    /**
     * Constructs a new <code>AddChunkToGroupData</code>.
     * @alias module:model/AddChunkToGroupData
     * @param chunkId {String} Id of the chunk to make a member of the group.
     */
    constructor(chunkId) { 
        
        AddChunkToGroupData.initialize(this, chunkId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chunkId) { 
        obj['chunk_id'] = chunkId;
    }

    /**
     * Constructs a <code>AddChunkToGroupData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddChunkToGroupData} obj Optional instance to populate.
     * @return {module:model/AddChunkToGroupData} The populated <code>AddChunkToGroupData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddChunkToGroupData();

            if (data.hasOwnProperty('chunk_id')) {
                obj['chunk_id'] = ApiClient.convertToType(data['chunk_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddChunkToGroupData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddChunkToGroupData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddChunkToGroupData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['chunk_id'] && !(typeof data['chunk_id'] === 'string' || data['chunk_id'] instanceof String)) {
            throw new Error("Expected the field `chunk_id` to be a primitive type in the JSON string but got " + data['chunk_id']);
        }

        return true;
    }


}

AddChunkToGroupData.RequiredProperties = ["chunk_id"];

/**
 * Id of the chunk to make a member of the group.
 * @member {String} chunk_id
 */
AddChunkToGroupData.prototype['chunk_id'] = undefined;






export default AddChunkToGroupData;

