/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateUserData model module.
 * @module model/UpdateUserData
 * @version 0.5.0
 */
class UpdateUserData {
    /**
     * Constructs a new <code>UpdateUserData</code>.
     * @alias module:model/UpdateUserData
     * @param organizationId {String} The id of the organization to update the user for.
     */
    constructor(organizationId) { 
        
        UpdateUserData.initialize(this, organizationId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, organizationId) { 
        obj['organization_id'] = organizationId;
    }

    /**
     * Constructs a <code>UpdateUserData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateUserData} obj Optional instance to populate.
     * @return {module:model/UpdateUserData} The populated <code>UpdateUserData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateUserData();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organization_id')) {
                obj['organization_id'] = ApiClient.convertToType(data['organization_id'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'Number');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('visible_email')) {
                obj['visible_email'] = ApiClient.convertToType(data['visible_email'], 'Boolean');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateUserData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateUserData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateUserData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['organization_id'] && !(typeof data['organization_id'] === 'string' || data['organization_id'] instanceof String)) {
            throw new Error("Expected the field `organization_id` to be a primitive type in the JSON string but got " + data['organization_id']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}

UpdateUserData.RequiredProperties = ["organization_id"];

/**
 * In the sense of a legal name, not a username. The new name to assign to the user, if not provided, the current name will be used.
 * @member {String} name
 */
UpdateUserData.prototype['name'] = undefined;

/**
 * The id of the organization to update the user for.
 * @member {String} organization_id
 */
UpdateUserData.prototype['organization_id'] = undefined;

/**
 * Either 0 (user), 1 (admin), or 2 (owner). If not provided, the current role will be used. The auth'ed user must have a role greater than or equal to the role being assigned.
 * @member {Number} role
 */
UpdateUserData.prototype['role'] = undefined;

/**
 * The id of the user to update, if not provided, the auth'ed user will be updated. If provided, the auth'ed user must be an admin (1) or owner (2) of the organization.
 * @member {String} user_id
 */
UpdateUserData.prototype['user_id'] = undefined;

/**
 * The new username to assign to the user, if not provided, the current username will be used.
 * @member {String} username
 */
UpdateUserData.prototype['username'] = undefined;

/**
 * Determines if the user's email is visible to other users, if not provided, the current value will be used.
 * @member {Boolean} visible_email
 */
UpdateUserData.prototype['visible_email'] = undefined;

/**
 * The new website to assign to the user, if not provided, the current website will be used. Used for linking to the user's personal or company website.
 * @member {String} website
 */
UpdateUserData.prototype['website'] = undefined;






export default UpdateUserData;

