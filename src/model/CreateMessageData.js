/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateMessageData model module.
 * @module model/CreateMessageData
 * @version 0.5.0
 */
class CreateMessageData {
    /**
     * Constructs a new <code>CreateMessageData</code>.
     * @alias module:model/CreateMessageData
     * @param newMessageContent {String} The content of the user message to attach to the topic and then generate an assistant message in response to.
     * @param topicId {String} The ID of the topic to attach the message to.
     */
    constructor(newMessageContent, topicId) { 
        
        CreateMessageData.initialize(this, newMessageContent, topicId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, newMessageContent, topicId) { 
        obj['new_message_content'] = newMessageContent;
        obj['topic_id'] = topicId;
    }

    /**
     * Constructs a <code>CreateMessageData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateMessageData} obj Optional instance to populate.
     * @return {module:model/CreateMessageData} The populated <code>CreateMessageData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateMessageData();

            if (data.hasOwnProperty('highlight_citations')) {
                obj['highlight_citations'] = ApiClient.convertToType(data['highlight_citations'], 'Boolean');
            }
            if (data.hasOwnProperty('highlight_delimiters')) {
                obj['highlight_delimiters'] = ApiClient.convertToType(data['highlight_delimiters'], ['String']);
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('new_message_content')) {
                obj['new_message_content'] = ApiClient.convertToType(data['new_message_content'], 'String');
            }
            if (data.hasOwnProperty('stream_response')) {
                obj['stream_response'] = ApiClient.convertToType(data['stream_response'], 'Boolean');
            }
            if (data.hasOwnProperty('topic_id')) {
                obj['topic_id'] = ApiClient.convertToType(data['topic_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateMessageData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateMessageData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateMessageData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['highlight_delimiters'])) {
            throw new Error("Expected the field `highlight_delimiters` to be an array in the JSON data but got " + data['highlight_delimiters']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['new_message_content'] && !(typeof data['new_message_content'] === 'string' || data['new_message_content'] instanceof String)) {
            throw new Error("Expected the field `new_message_content` to be a primitive type in the JSON string but got " + data['new_message_content']);
        }
        // ensure the json data is a string
        if (data['topic_id'] && !(typeof data['topic_id'] === 'string' || data['topic_id'] instanceof String)) {
            throw new Error("Expected the field `topic_id` to be a primitive type in the JSON string but got " + data['topic_id']);
        }

        return true;
    }


}

CreateMessageData.RequiredProperties = ["new_message_content", "topic_id"];

/**
 * Whether or not to highlight the citations in the response. If this is set to true or not included, the citations will be highlighted. If this is set to false, the citations will not be highlighted. Default is true.
 * @member {Boolean} highlight_citations
 */
CreateMessageData.prototype['highlight_citations'] = undefined;

/**
 * The delimiters to use for highlighting the citations. If this is not included, the default delimiters will be used. Default is `[\".\", \"!\", \"?\", \"\\n\", \"\\t\", \",\"]`.
 * @member {Array.<String>} highlight_delimiters
 */
CreateMessageData.prototype['highlight_delimiters'] = undefined;

/**
 * The model to use for the assistant's messages. This can be any model from the openrouter model list. If no model is provided, gpt-3.5-turbo will be used.
 * @member {String} model
 */
CreateMessageData.prototype['model'] = undefined;

/**
 * The content of the user message to attach to the topic and then generate an assistant message in response to.
 * @member {String} new_message_content
 */
CreateMessageData.prototype['new_message_content'] = undefined;

/**
 * Whether or not to stream the response. If this is set to true or not included, the response will be a stream. If this is set to false, the response will be a normal JSON response. Default is true.
 * @member {Boolean} stream_response
 */
CreateMessageData.prototype['stream_response'] = undefined;

/**
 * The ID of the topic to attach the message to.
 * @member {String} topic_id
 */
CreateMessageData.prototype['topic_id'] = undefined;






export default CreateMessageData;

