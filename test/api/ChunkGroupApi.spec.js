/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TrieveJsTsClient);
  }
}(this, function(expect, TrieveJsTsClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TrieveJsTsClient.ChunkGroupApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ChunkGroupApi', function() {
    describe('addChunkToGroup', function() {
      it('should call addChunkToGroup successfully', function(done) {
        //uncomment below and update the code to test addChunkToGroup
        //instance.addChunkToGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addChunkToGroupByTrackingId', function() {
      it('should call addChunkToGroupByTrackingId successfully', function(done) {
        //uncomment below and update the code to test addChunkToGroupByTrackingId
        //instance.addChunkToGroupByTrackingId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChunkGroup', function() {
      it('should call createChunkGroup successfully', function(done) {
        //uncomment below and update the code to test createChunkGroup
        //instance.createChunkGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChunkGroup', function() {
      it('should call deleteChunkGroup successfully', function(done) {
        //uncomment below and update the code to test deleteChunkGroup
        //instance.deleteChunkGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteGroupByTrackingId', function() {
      it('should call deleteGroupByTrackingId successfully', function(done) {
        //uncomment below and update the code to test deleteGroupByTrackingId
        //instance.deleteGroupByTrackingId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChunkGroup', function() {
      it('should call getChunkGroup successfully', function(done) {
        //uncomment below and update the code to test getChunkGroup
        //instance.getChunkGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChunksInGroup', function() {
      it('should call getChunksInGroup successfully', function(done) {
        //uncomment below and update the code to test getChunksInGroup
        //instance.getChunksInGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChunksInGroupByTrackingId', function() {
      it('should call getChunksInGroupByTrackingId successfully', function(done) {
        //uncomment below and update the code to test getChunksInGroupByTrackingId
        //instance.getChunksInGroupByTrackingId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getGroupByTrackingId', function() {
      it('should call getGroupByTrackingId successfully', function(done) {
        //uncomment below and update the code to test getGroupByTrackingId
        //instance.getGroupByTrackingId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getGroupsChunkIsIn', function() {
      it('should call getGroupsChunkIsIn successfully', function(done) {
        //uncomment below and update the code to test getGroupsChunkIsIn
        //instance.getGroupsChunkIsIn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecommendedGroups', function() {
      it('should call getRecommendedGroups successfully', function(done) {
        //uncomment below and update the code to test getRecommendedGroups
        //instance.getRecommendedGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSpecificDatasetChunkGroups', function() {
      it('should call getSpecificDatasetChunkGroups successfully', function(done) {
        //uncomment below and update the code to test getSpecificDatasetChunkGroups
        //instance.getSpecificDatasetChunkGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeChunkFromGroup', function() {
      it('should call removeChunkFromGroup successfully', function(done) {
        //uncomment below and update the code to test removeChunkFromGroup
        //instance.removeChunkFromGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchOverGroups', function() {
      it('should call searchOverGroups successfully', function(done) {
        //uncomment below and update the code to test searchOverGroups
        //instance.searchOverGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchWithinGroup', function() {
      it('should call searchWithinGroup successfully', function(done) {
        //uncomment below and update the code to test searchWithinGroup
        //instance.searchWithinGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChunkGroup', function() {
      it('should call updateChunkGroup successfully', function(done) {
        //uncomment below and update the code to test updateChunkGroup
        //instance.updateChunkGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGroupByTrackingId', function() {
      it('should call updateGroupByTrackingId successfully', function(done) {
        //uncomment below and update the code to test updateGroupByTrackingId
        //instance.updateGroupByTrackingId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
